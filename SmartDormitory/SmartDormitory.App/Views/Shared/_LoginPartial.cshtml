@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@{
    string firstText = User.Identity.IsAuthenticated ?
        ((await UserManager.GetUserAsync(User)).UserName) : string.Empty;
    string secondText = User.Identity.IsAuthenticated ?
        ((await UserManager.GetUserAsync(User)).Id)
        : string.Empty;
}
@* TODO: Analyze this - if user manager methods are commented it starts, otherwise - exception *@
@*@if (SignInManager.IsSignedIn(User))*@
@if (User.Identity.IsAuthenticated)
{
<form asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })"
      method="post" id="logoutForm">
    <ul class="navbar-nav nav-flex-icons">
        <li class="nav-item dropdown no-arrow">
            <a class="nav-link dropdown-toggle waves-effect" id="userDropdown"
               data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <i class="fas fa-user-ninja"></i> @firstText
            </a>
            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="userDropdown">
                <a asp-area="Identity" asp-route-userId="@secondText"
                    asp-page="/Account/Manage/Index"
                    class="dropdown-item waves-effect" style="text-align:center">My profile</a>
                <div class="dropdown-divider"></div>
                <div class="d-flex justify-content-center">
                    <button type="submit" class="btn btn-light waves-effect">Sign out</button>
                </div>
            </div>
        </li>
    </ul>
</form>
}
else
{
<ul class="navbar-nav nav-flex-icons">
    <li class="nav-item"><a asp-area="Identity" asp-page="/Account/Register" class="nav-link waves-effect">Register</a></li>
    <li class="nav-item"><a asp-area="Identity" asp-page="/Account/Login" class="nav-link waves-effect">Sign In</a></li>
</ul>
}
