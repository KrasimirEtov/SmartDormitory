@model MySensorsViewModel
@if (!Model.Sensors.Any())
{
    <div class="text-center">
        <h2>You don't have any registered sensors.</h2>
        <br />
        <h2 class="pb-5">Consider adding one?</h2>
        <br />
        <a asp-area="" asp-controller="Sensor" asp-action="RegisterIndex" class="btn btn-lg peach-gradient">

            Create your first sensor now! <i class="fas fa-sign-in-alt"></i>
        </a>
    </div>
}
else
{
    <div class="form-row">
        <div class="col-lg-4">
            <label class="text-center text-black-50">Search</label>
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span class="input-group-text cyan lighten-2" id="basic-text1">
                        <i class="fa fa-search text-white" aria-hidden="true"></i>
                    </span>
                </div>
                <input type="text" id="searchTerm" class="form-control" aria-describedby="searchBtn">
                <div class="input-group-append">
                    <button class="btn btn-md btn-outline-default m-0 px-3 py-2 z-depth-0 waves-effect" type="submit" id="searchBtn">Find</button>
                </div>
            </div>
        </div>

        <div class="col-lg-4 form-group">
            <label class="text-black-50">Choose sensor type</label>
            <select asp-for="@Model.MeasureTypeId" asp-items="Model.MeasureTypes" class="form-control text-warning text-monospace">
                <option value="all" class="grey_color">-- All --</option>
            </select>

        </div>
        <div class="col-lg-2 form-group">
            <label class="text-center text-black-50">Privacy</label>
            <select asp-for="@Model.Privacy" class="form-control text-warning text-monospace">
                <option value="-1" class="grey_color">-- All --</option>
                <option value="1">Public</option>
                <option value="0">Private</option>
            </select>
        </div>
        <div class="col-lg-2 form-group">
            <label class="text-center text-black-50">Notifications</label>
            <select asp-for="@Model.AlarmOn" class="form-control text-warning text-monospace">
                <option value="-1" class="grey_color">-- All --</option>
                <option value="1">Active</option>
                <option value="0">Inactive</option>
            </select>
        </div>
    </div>
    <div class="form-row">
        <button class="btn btn-outline-deep-orange waves-effect my-sm-0 btn-block"
                data-toggle="modal" data-target="#mySensorsMapsModal">
            <b>View on map</b> <i class="fas fa-map-marked-alt"></i>
        </button>
        @*<a id="scrollToMap" href="#mySensorsMap"
               class="btn btn-outline-deep-orange waves-effect my-sm-0 btn-block">
                View sensors on map
            </a>*@
    </div>
    <hr />
    <div id="mySensors" class="form-group">
        <partial name="_MySensorsTable" model="@Model.Sensors" />
    </div>
    <div class="modal fade" id="mySensorsMapsModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-body mb-0 p-0">
                    <div id="mySensorsMap"></div>
                </div>
                <div class="modal-footer bg-dark justify-content-center">
                    <button type="button" class="btn btn-outline-primary" data-dismiss="modal">
                        Close
                        <i class="fas fa-map-marker-alt"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAbGBfxwfVNuXS1OY-O8qbuglmWIbkEC70&callback=initMap">
</script>
<script src="~/lib/markerclusterer/js/markerclusterer.js"></script>
<script>
    let gm_map;
    // Initialize and add the map
    function initMap() {

        const options_googlemaps = {
            minZoom: 4,
            zoom: 11,
            center: new google.maps.LatLng(42.6977, 23.3219), //sofia coords
            maxZoom: 18,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            streetViewControl: false,
            styles: [
                { elementType: 'geometry', stylers: [{ color: '#242f3e' }] },
                { elementType: 'labels.text.stroke', stylers: [{ color: '#242f3e' }] },
                { elementType: 'labels.text.fill', stylers: [{ color: '#746855' }] },
                {
                    featureType: 'administrative.locality',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#d59563' }]
                },
                {
                    featureType: 'poi',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#d59563' }]
                },
                {
                    featureType: 'poi.park',
                    elementType: 'geometry',
                    stylers: [{ color: '#263c3f' }]
                },
                {
                    featureType: 'poi.park',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#6b9a76' }]
                },
                {
                    featureType: 'road',
                    elementType: 'geometry',
                    stylers: [{ color: '#38414e' }]
                },
                {
                    featureType: 'road',
                    elementType: 'geometry.stroke',
                    stylers: [{ color: '#212a37' }]
                },
                {
                    featureType: 'road',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#9ca5b3' }]
                },
                {
                    featureType: 'road.highway',
                    elementType: 'geometry',
                    stylers: [{ color: '#746855' }]
                },
                {
                    featureType: 'road.highway',
                    elementType: 'geometry.stroke',
                    stylers: [{ color: '#1f2835' }]
                },
                {
                    featureType: 'road.highway',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#f3d19c' }]
                },
                {
                    featureType: 'transit',
                    elementType: 'geometry',
                    stylers: [{ color: '#2f3948' }]
                },
                {
                    featureType: 'transit.station',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#d59563' }]
                },
                {
                    featureType: 'poi.business',
                    stylers: [{ visibility: 'off' }]
                },
                {
                    featureType: 'transit',
                    elementType: 'labels.icon',
                    stylers: [{ visibility: 'off' }]
                },
                {
                    featureType: 'water',
                    elementType: 'geometry',
                    stylers: [{ color: '#17263c' }]
                },
                {
                    featureType: 'water',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#515c6d' }]
                },
                {
                    featureType: 'water',
                    elementType: 'labels.text.stroke',
                    stylers: [{ color: '#17263c' }]
                }
            ]
        }

        gm_map = new google.maps.Map(document.getElementById('mySensorsMap'), options_googlemaps)

        let markers = [];
        const privateSensorIconUrl = 'http://maps.google.com/mapfiles/kml/pushpin/red-pushpin.png';
        const ownPublicSensorIconUrl = 'http://maps.google.com/mapfiles/kml/pushpin/grn-pushpin.png';

        $.getJSON("/Sensor/IndexMapAllUserSensors", function (data) {
            for (let i = 0; i < data.length; i++) {
                let latLng = new google.maps.LatLng(data[i].coordinates.latitude,
                    data[i].coordinates.longitude);

                markers[i] = new google.maps.Marker({
                    position: latLng,
                    map: gm_map,
                    animation: google.maps.Animation.DROP,
                    icon: '/images/map-marker.png'
                });

                let formatDate = data[i].createdOn.replace(/(\d{4})\-(\d{2})\-(\d{2}).*/, '$3-$2-$1');
                //console.log(formatDate)
                let contentString =
                    '<p>Name: ' + '<span class="h6 text-primary">' + data[i].name + '</span></p>' +
                    '<p>Created on: <span class=" text-danger">' + formatDate + '</span></p>' +
                    '<p>Sensor type: <span class="h6 text-warning">' + data[i].sensorType + '</span></p>';

                let loggedInUserId = '@this.User.GetId()';

                    //add sensor details url if owner?
                    markers[i].setAnimation(google.maps.Animation.BOUNCE);
                    markers[i].addListener('click', function() {
                        if (markers[i].getAnimation() !== null) {
                            markers[i].setAnimation(null);
                        } else {
                            markers[i].setAnimation(google.maps.Animation.BOUNCE);
                        }
                    });

                    if (!data[i].isPublic) {
                        markers[i].setIcon(privateSensorIconUrl);
                        contentString += '<p>Status: <span class="h6 text-danger"> Private <i class="fas fa-user-secret"></i></span></p>';
                    } else {
                        markers[i].setIcon(ownPublicSensorIconUrl);
                        contentString += '<p>Status: <span class="h6 text-success"> Public <i class="fas fa-globe-americas"></i></span></p>';
                    }
                contentString += '<p class="h6"><a href="/Sensor/Details?sensorId=' + data[i].id + '" class="badge badge-info">Sensor details</a></p>';



                let infowindow = new google.maps.InfoWindow({
                    content: contentString
                });
                markers[i].addListener('click', function () {
                    infowindow.open(gm_map, markers[i]);
                });
            }

            let markerCluster = new MarkerClusterer(gm_map, markers);
        });
    }
</script>

<script>
    $(function () {
        const reloadTable = function () {
            let typeId = $("#MeasureTypeId").val();
            let searchTerm = $("#searchTerm").val();
            let alarm = $("#AlarmOn").val();
            let privacy = $("#Privacy").val();

            let url = "@Url.Action("ReloadMySensorsTable", "Sensor")?measureTypeId=" + typeId
                + '&searchTerm=' + searchTerm + '&alarmOn=' + alarm + '&privacy=' + privacy;

           $("#mySensors").load(url);
        }
        $("#MeasureTypeId").change(reloadTable);
        $("#AlarmOn").change(reloadTable);
        $("#Privacy").change(reloadTable);
        $("#searchBtn").click(reloadTable);

        setInterval(function () {
            reloadTable();
        }, @Model.MinPollingInterval * 1000);

        $("#searchTerm").keyup(function (event) {
            if (event.keyCode === 13) {
                reloadTable();
            }
        });
    });
</script>
