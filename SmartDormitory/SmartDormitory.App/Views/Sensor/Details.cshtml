@model DetailsSensorViewModel

@{
    string sensorPrivacyIcon = Model.IsPublic ? "fa-globe-americas" : "fas fa-lock";
    string sensorPrivacyText = Model.IsPublic ? "Public" : "Private";
    string sensorAlarmIcon = Model.IsPublic ? "fa-bell" : "fas fa-times-circle";
    string sensorAlarmText = Model.AlarmOn ? "Alarm On" : "Alarm Off";
    string url = $"/Identity/Account/Manage?userId={Model.userId}";
}

<div class="card">
    <div class="card-body">
        <div class="card">
            <div class="card-body">
                <h2 class="card-title" style="text-align:center">Sensor name: @Model.Name</h2>
            </div>
        </div>
        <br />
        <div class="form-row">
            <div class="col-md-6 col-sm-12">
                <div class="card ">
                    <div class="card-body text-center">
                        <h2 class="card-title">Description:</h2>
                        <p>@Model.Description</p>
                    </div>
                </div>
                <br />
                <div class="card">
                    <div class="card-body text-center">
                        <h2 class="card-title">Polling Interval:</h2>
                        <h4><b>@Model.PollingInterval</b></h4>
                    </div>
                </div>
                <br />
                <div class="card">
                    <div class="card-body text text-center">
                        <h2 class="card-title">Sensor state:</h2>
                        <div class="form-row">
                            <h4><i class="fas @sensorPrivacyIcon col-3"></i> @sensorPrivacyText</h4>
                            <h4><i class="fas @sensorPrivacyIcon col-3"></i> @sensorAlarmText</h4>
                        </div>

                    </div>
                </div>
            </div>
            <br />
            <div class="col-md-6 col-sm-12">
                <div class="card">
                    <div class="card-body text-center">
                        <h2 class="card-title">Real Time data:</h2>
                        <div id="sensor" class="gauge"></div>
                    </div>
                </div>
            </div>
        </div>
        <br />
        <div class="card">
            <div class="card-body">
                <h2 class="card-title text-center">Location:</h2>
                <div id="detailsMap"></div>
            </div>
        </div>
    </div>
</div>


<script>
    $(function () {
        var gauge = new JustGage({
            id: "sensor",
            value: getRandomInt(@Model.MinRangeValue, @Model.MaxRangeValue),
            min: @Model.MinRangeValue,
            max: @Model.MaxRangeValue,
            decimals: 2,
            gaugeWidthScale: 0.6,
            customSectors: [{
                color: "#00ff00",
                lo: @Model.MinRangeValue + 100,
                hi: @Model.MaxRangeValue - 200
            }, {
                color: "#ff0000",
                lo: @Model.MaxRangeValue + 200,
                hi: @Model.MaxRangeValue - 100
            }],
            counter: true,
            relativeGaugeSize: true
        });

        $('#gauge_refresh').click(function () {
            gauge.refresh(getRandomInt(@Model.MinRangeValue, @Model.MaxRangeValue));
        });

        $('#gauge_update').click(function () {
            gauge.update({
                value: getRandomInt(@Model.MinRangeValue, @Model.MaxRangeValue),
                customSectors: [{
                    color: "#00ff00",
                    lo: @Model.MinRangeValue + 50,
                    hi: @Model.MaxRangeValue - 80
                }, {
                    color: "#ff0000",
                    lo: @Model.MinRangeValue + 25,
                    hi: @Model.MaxRangeValue - 100
                }]
            });
        });

        setInterval(function () {
            gauge.refresh(getRandomInt(@Model.MinRangeValue, @Model.MaxRangeValue));
        }, 1500);

    });
</script>

<script src="~/js/raphael-2.1.4.min.js"></script>
<script src="~/js/justgage.js"></script>

<script>
        function initMap() {
            // The location of the sensor
            var sensor = { lat: @Model.Latitude, lng: @Model.Longtitude };
            // The map, centered at the sensor
            var map = new google.maps.Map(
                document.getElementById('detailsMap'), {
                    zoom: 12,
                    center: sensor,
                    streetViewControl: true,
                    mapTypeId: 'roadmap'

                });
            // The marker, positioned at the sensor
            var marker = new google.maps.Marker({ position: sensor, map: map });
            var contentString = '<div id="content">'+
            '<div id="siteNotice">'+
            '</div>'+
            '<h1 id="firstHeading" class="firstHeading">@Model.Name</h1>'+
            '<div id="bodyContent">'+
            '<p><b>@Model.Description</b></p>'+
            '<p><b>Owner profile link - <a href="@url">'+
            'Click here</b></a>'+
            '</p>'+
            '</div>'+
            '</div>';

            var infowindow = new google.maps.InfoWindow({
                content: contentString
            });
             marker.addListener('click', function() {
          infowindow.open(map, marker);
        });
        }
</script>

<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAbGBfxwfVNuXS1OY-O8qbuglmWIbkEC70&callback=initMap">
</script>