@model DashboardViewModel
@{
    ViewData["Title"] = "Index page";
}
<h1>Dashboard</h1>
<hr />

<div class="form-row">
    <div class="col-4 text-center">
        <div class="card text-white bg-info mb-3 border-dark" style="max-width: 20rem;">
            <div class="card-header"><b>Users</b></div>
            <div class="card-body">
                <p class="card-text text-white">Total number of registered users: <b>@Model.UsersCount</b></p>
            </div>
            <a asp-area="Administration" asp-controller="UserManager" asp-action="Index"
               class="card-footer bg-transparent border-grey text-center">
                <span class="pull-left text-white">View All</span>
                <span class="pull-right text-white"><i class="fa fa-arrow-circle-right"></i></span>
            </a>
        </div>

    </div>

    <div class="col-4 text-center">
        <div class="card text-white bg-secondary mb-3 border-dark" style="max-width: 20rem;">
            <div class="card-header"><b>Sensors</b></div>
            <div class="card-body">
                <p class="card-text text-white">Total number of registered sensors: <b>@Model.SensorsCount</b></p>
            </div>

            <a asp-area="Administration" asp-controller="Sensor" asp-action="Index"
               class="card-footer bg-transparent border-grey text-center">
                <span class="pull-left text-white">View All</span>
                <span class="pull-right text-white"><i class="fa fa-arrow-circle-right"></i></span>
            </a>
        </div>
    </div>

    <div class="col-4 text-center">
        <div class="card text-white bg-primary mb-3 border-dark" style="max-width: 20rem;">
            <div class="card-header"><b>Measure types</b></div>
            <div class="card-body">
                <p class="card-text text-white">Count of measure types: <b>@Model.MeasureTypesCount</b></p>
            </div>

            <a asp-area="Administration" asp-controller="MeasureType" asp-action="Index"
               class="card-footer bg-transparent border-grey text-center">
                <span class="pull-left text-white">View All</span>
                <span class="pull-right text-white"><i class="fa fa-arrow-circle-right"></i></span>
            </a>
        </div>
    </div>
</div>

<div class="row">
    <div id="adminDashboardMap">
    </div>
</div>

<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAbGBfxwfVNuXS1OY-O8qbuglmWIbkEC70&callback=initMap">
</script>
<script src="~/lib/markerclusterer/js/markerclusterer.js"></script>
<script>
    let gm_map;
    // Initialize and add the map
    function initMap() {

        const options_googlemaps = {
            minZoom: 4,
            zoom: 11,
            center: new google.maps.LatLng(42.6977, 23.3219), //sofia coords
            maxZoom: 18,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            streetViewControl: false,
            styles: [
                { elementType: 'geometry', stylers: [{ color: '#242f3e' }] },
                { elementType: 'labels.text.stroke', stylers: [{ color: '#242f3e' }] },
                { elementType: 'labels.text.fill', stylers: [{ color: '#746855' }] },
                {
                    featureType: 'administrative.locality',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#d59563' }]
                },
                {
                    featureType: 'poi',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#d59563' }]
                },
                {
                    featureType: 'poi.park',
                    elementType: 'geometry',
                    stylers: [{ color: '#263c3f' }]
                },
                {
                    featureType: 'poi.park',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#6b9a76' }]
                },
                {
                    featureType: 'road',
                    elementType: 'geometry',
                    stylers: [{ color: '#38414e' }]
                },
                {
                    featureType: 'road',
                    elementType: 'geometry.stroke',
                    stylers: [{ color: '#212a37' }]
                },
                {
                    featureType: 'road',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#9ca5b3' }]
                },
                {
                    featureType: 'road.highway',
                    elementType: 'geometry',
                    stylers: [{ color: '#746855' }]
                },
                {
                    featureType: 'road.highway',
                    elementType: 'geometry.stroke',
                    stylers: [{ color: '#1f2835' }]
                },
                {
                    featureType: 'road.highway',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#f3d19c' }]
                },
                {
                    featureType: 'transit',
                    elementType: 'geometry',
                    stylers: [{ color: '#2f3948' }]
                },
                {
                    featureType: 'transit.station',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#d59563' }]
                },
                {
                    featureType: 'poi.business',
                    stylers: [{ visibility: 'off' }]
                },
                {
                    featureType: 'transit',
                    elementType: 'labels.icon',
                    stylers: [{ visibility: 'off' }]
                },
                {
                    featureType: 'water',
                    elementType: 'geometry',
                    stylers: [{ color: '#17263c' }]
                },
                {
                    featureType: 'water',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#515c6d' }]
                },
                {
                    featureType: 'water',
                    elementType: 'labels.text.stroke',
                    stylers: [{ color: '#17263c' }]
                }
            ]
        }

        gm_map = new google.maps.Map(document.getElementById('adminDashboardMap'), options_googlemaps)

        let markers = [];
        const privateSensorIconUrl = 'http://maps.google.com/mapfiles/kml/pushpin/red-pushpin.png';
        const ownPublicSensorIconUrl = 'http://maps.google.com/mapfiles/kml/pushpin/grn-pushpin.png';

        $.getJSON("/Administration/Home/IndexMapAllSensors", function (data) {
            console.log(data)
            for (let i = 0; i < data.length; i++) {
                let latLng = new google.maps.LatLng(data[i].coordinates.latitude,
                    data[i].coordinates.longitude);

                markers[i] = new google.maps.Marker({
                    position: latLng,
                    map: gm_map,
                    animation: google.maps.Animation.DROP,
                    icon: '/images/map-marker.png'
                });

                let formatDate = data[i].createdOn.replace(/(\d{4})\-(\d{2})\-(\d{2}).*/, '$3-$2-$1');
                //console.log(formatDate)
                let contentString =
                    '<p>Name: ' + '<span class="h6 text-primary">' + data[i].name + '</span></p>' +
                    '<p>Created on: <span class=" text-danger">' + formatDate + '</span></p>' +
                    '<p>Sensor type: <span class="h6 text-warning">' + data[i].sensorType + '</span></p>' +
                    '<p>Last value: <span class="h5">' + data[i].value + '</span></p>' +
                    '<h6> <a href="/Sensor/Details?sensorId=' + data[i].id + '" class="badge badge-info">Sensor details</a>          ' +
                    '<a href="/Identity/Account/Manage?userId=' + data[i].userId + '" class="badge badge-info">Owner profile</a></h6>';
                console.log(data[i].value )
                let loggedInUserId = '@this.User.GetId()';
                let isCurrentUserSensor = loggedInUserId === data[i].userId;

                if (isCurrentUserSensor) {
                    markers[i].setAnimation(google.maps.Animation.BOUNCE);
                    markers[i].addListener('click', function() {
                        if (markers[i].getAnimation() !== null) {
                            markers[i].setAnimation(null);
                        } else {
                            markers[i].setAnimation(google.maps.Animation.BOUNCE);
                        }
                    });

                    if (!data[i].isPublic) {
                        markers[i].setIcon(privateSensorIconUrl);
                        contentString += '<p>Status: <span class="h6 text-danger"> Private <i class="fas fa-user-secret"></i></span></p>';
                    } else {
                        markers[i].setIcon(ownPublicSensorIconUrl);
                        contentString += '<p>Status: <span class="h6 text-success"> Public <i class="fas fa-globe-americas"></i></span></p>';
                    }
                }
                else {
                    if (!data[i].isPublic) {
                        markers[i].setIcon('/images/private-marker-icon.png');
                        contentString += '<p>Status: <span class="h6 text-danger"> Private <i class="fas fa-user-secret"></i></span></p>';
                    } else {
                        contentString += '<p>Status: <span class="h6 text-success"> Public <i class="fas fa-globe-americas"></i></span></p>';
                    }
                }

                let infowindow = new google.maps.InfoWindow({
                    content: contentString
                });
                markers[i].addListener('click', function () {
                    infowindow.open(gm_map, markers[i]);
                });
            }

            let markerCluster = new MarkerClusterer(gm_map, markers);
        });
    }
</script>