@model HomeIndexViewModel

@{
    ViewData["Title"] = "SmartDormitory";
}

<div class="row">
    <div class="card card-image" style="background-image:url(/images/smartdorm.jpg); ">
        <div class="text-white text-center rgba-stylish-strong">
            <div class="py-5">
                <!-- Content -->
                <div class="display-3 h2 orange-text font-weight-bold"><i class="fas fa-tachometer-alt"></i> @ViewData["Title"]</div>
                <h2 class="card-title h4 my-4 py-2">Intelligent Sensor Information System</h2>
                <div class="mb-4 pb-2 px-md-5 mx-md-5" style="background-color: rgba(35, 29, 29, 0.60);">
                    Information system that collects data from various sensors located in college dormitories all over the world.
                    <p> Data will be analyzed by independent research organization to evaluate the living conditions and map them to the performance of the students.</p>
                </div>
                @if (!this.User.Identity.IsAuthenticated)
                {
                    <a asp-area="Identity" asp-page="/Account/Register" class="btn btn-lg peach-gradient">
                        <i class="fas fa-sign-in-alt"></i>  Join now
                    </a>
                }
                else
                {
                    <a asp-area="" asp-controller="Sensor" asp-action="MySensors" class="btn btn-lg peach-gradient">
                        <i class="fas fa-sign-in-alt"></i>  Go to my sensors
                    </a>
                }
            </div>
        </div>
    </div>
</div>
<div class="jumbotron text-center mdb-color lighten-2 white-text">
    <div class="row d-flex justify-content-center">
        <div class="col-xl-12">
            <p class="card-text">
                We support @Model.SensorTypesCount different sensor types and @Model.SensorModelsCount sensor models overall.
            </p>
            <p>
                Currently have @Model.RegisteredSensorsCount registered sensors by @Model.TotalUsers active users!
            </p>
        </div>
    </div>
    <hr class="my-4 rgba-white-light">
    <a id="scrollToMap" href="#homeIndexMap" class="btn btn-outline-amber"><span></span>View sensors on map</a>
</div>
<img src='~/images/m1.png'>
<img src='~/images/m2.png'>
<img src='~/images/m3.png'>
<img src='~/images/m4.png'>
<img src='~/images/m5.png'>
<div class="row">
    <div id="homeIndexMap"></div>
</div>

<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAbGBfxwfVNuXS1OY-O8qbuglmWIbkEC70&callback=initMap">
</script>
<script src="~/lib/markerclusterer/js/markerclusterer.js"></script>
<script>
    let gm_map;
    // Initialize and add the map
    function initMap() {

        const options_googlemaps = {
            minZoom: 4,
            zoom: 11,
            center: new google.maps.LatLng(42.6977, 23.3219), //sofia coords
            maxZoom: 18,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            streetViewControl: false,
            styles: [
                { elementType: 'geometry', stylers: [{ color: '#242f3e' }] },
                { elementType: 'labels.text.stroke', stylers: [{ color: '#242f3e' }] },
                { elementType: 'labels.text.fill', stylers: [{ color: '#746855' }] },
                {
                    featureType: 'administrative.locality',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#d59563' }]
                },
                {
                    featureType: 'poi',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#d59563' }]
                },
                {
                    featureType: 'poi.park',
                    elementType: 'geometry',
                    stylers: [{ color: '#263c3f' }]
                },
                {
                    featureType: 'poi.park',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#6b9a76' }]
                },
                {
                    featureType: 'road',
                    elementType: 'geometry',
                    stylers: [{ color: '#38414e' }]
                },
                {
                    featureType: 'road',
                    elementType: 'geometry.stroke',
                    stylers: [{ color: '#212a37' }]
                },
                {
                    featureType: 'road',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#9ca5b3' }]
                },
                {
                    featureType: 'road.highway',
                    elementType: 'geometry',
                    stylers: [{ color: '#746855' }]
                },
                {
                    featureType: 'road.highway',
                    elementType: 'geometry.stroke',
                    stylers: [{ color: '#1f2835' }]
                },
                {
                    featureType: 'road.highway',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#f3d19c' }]
                },
                {
                    featureType: 'transit',
                    elementType: 'geometry',
                    stylers: [{ color: '#2f3948' }]
                },
                {
                    featureType: 'transit.station',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#d59563' }]
                },
                {
                    featureType: 'poi.business',
                    stylers: [{ visibility: 'off' }]
                },
                {
                    featureType: 'transit',
                    elementType: 'labels.icon',
                    stylers: [{ visibility: 'off' }]
                },
                {
                    featureType: 'water',
                    elementType: 'geometry',
                    stylers: [{ color: '#17263c' }]
                },
                {
                    featureType: 'water',
                    elementType: 'labels.text.fill',
                    stylers: [{ color: '#515c6d' }]
                },
                {
                    featureType: 'water',
                    elementType: 'labels.text.stroke',
                    stylers: [{ color: '#17263c' }]
                }
            ]
        }

        gm_map = new google.maps.Map(document.getElementById('homeIndexMap'), options_googlemaps)

        let markers = [];
        let infoWindows = [];
        const privateSensorIconUrl = 'http://maps.google.com/mapfiles/kml/pushpin/red-pushpin.png';
        const ownPublicSensorIconUrl = 'http://maps.google.com/mapfiles/kml/pushpin/grn-pushpin.png';

        $.getJSON("/Home/GetSensorsCoordinates", function (data) {

            for (let i = 0; i < data.length; i++) {
                let latLng = new google.maps.LatLng(data[i].coordinates.latitude,
                    data[i].coordinates.longitude);

                markers[i] = new google.maps.Marker({
                    position: latLng,
                    map: gm_map,
                    animation: google.maps.Animation.DROP,
                    icon: '/images/map-marker.png'
                });

                let formatDate = data[i].createdOn.replace(/(\d{4})\-(\d{2})\-(\d{2}).*/, '$3-$2-$1');
                //console.log(formatDate)
                let contentString =
                    '<p>Name: ' + '<span class="h6 text-primary">' + data[i].name + '</span></p>' +
                    '<p>Created on: <span class=" text-danger">' + formatDate + '</span></p>' +
                    '<p>Sensor type: <span class="h6 text-warning">' + data[i].sensorType + '</span></p>';

                let loggedInUserId = '@this.User.GetId()';
                let isCurrentUserSensor = loggedInUserId === data[i].userId;

                if (isCurrentUserSensor) {
                    //add sensor details url if owner?
                    markers[i].setAnimation(google.maps.Animation.BOUNCE);
                    markers[i].addListener('click', function() {
                        if (markers[i].getAnimation() !== null) {
                            markers[i].setAnimation(null);
                        } else {
                            markers[i].setAnimation(google.maps.Animation.BOUNCE);
                        }
                    });

                    if (!data[i].isPublic) {
                        markers[i].setIcon(privateSensorIconUrl);
                        contentString += '<p>Status: <span class="h6 text-danger"> Private <i class="fas fa-user-secret"></i></span></p>';
                    } else {
                        markers[i].setIcon(ownPublicSensorIconUrl);
                        contentString += '<p>Status: <span class="h6 text-info"> Public <i class="fas fa-globe-americas"></i></span></p>';
                    }
                }
                else {
                    contentString += '<p>Status: <span class="h6 text-info"> Public <i class="fas fa-globe-americas"></i></span></p>';
                }

                infoWindows[i] = new google.maps.InfoWindow({
                    content: contentString
                });

                markers[i].addListener('mouseover', function () {
                    infoWindows[i].open(gm_map, markers[i]);
                });

                markers[i].addListener('mouseout', function () {
                    infoWindows[i].close();
                });
            }

            let markerCluster = new MarkerClusterer(gm_map, markers);
        });
    }
</script>


