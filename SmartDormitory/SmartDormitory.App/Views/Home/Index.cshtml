@model IEnumerable<HomeIndexViewModel>

@{
    ViewData["Title"] = "Home Page";
}

<style>
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
    #map {
        height: 600px; /* The height is 400 pixels */
        width: 100%; /* The width is the width of the web page */
    }
</style>

<h1>Google maps magic</h1>
<img src='~/images/m1.png'>
<img src='~/images/m2.png'>
<img src='~/images/m3.png'>
<img src='~/images/m4.png'>
<img src='~/images/m5.png'>

<div class="row">

</div>
<div class="row">
    <div id="map"></div>
</div>

<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAbGBfxwfVNuXS1OY-O8qbuglmWIbkEC70&callback=initMap">
</script>
<script src="~/lib/markerclusterer/js/markerclusterer.js"></script>
<script>
    let gm_map;
    // Initialize and add the map
    function initMap() {
        const options_googlemaps = {
            minZoom: 4,
            zoom: 11,
            center: new google.maps.LatLng(42.6977, 23.3219), //sofia coords
            maxZoom: 18,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            streetViewControl: false
        }

        gm_map = new google.maps.Map(document.getElementById('map'), options_googlemaps);

        let markers = [];
        let infoWindows = [];
        const privateSensorIconUrl = 'http://maps.google.com/mapfiles/kml/pushpin/red-pushpin.png';
        const ownPublicSensorIconUrl = 'http://maps.google.com/mapfiles/kml/pushpin/grn-pushpin.png';

        $.getJSON("/Home/GetSensorsCoordinates", function (data) {

            console.log(data)
            for (let i = 0; i < data.length; i++) {
                let latLng = new google.maps.LatLng(data[i].coordinates.latitude,
                    data[i].coordinates.longitude);

                markers[i] = new google.maps.Marker({
                    position: latLng,
                    map: gm_map,
                    animation: google.maps.Animation.DROP
                });

                let formatDate = data[i].createdOn.replace(/(\d{4})\-(\d{2})\-(\d{2}).*/, '$3-$2-$1');
                //console.log(formatDate)
                let contentString =
                    '<p>Name: ' + '<span class="h6 text-primary">' + data[i].name + '</span></p>' +
                    '<p>Created on: <span class=" text-danger">' + formatDate + '</span></p>' +
                    '<p>Sensor type: <span class="h6 text-warning">' + data[i].sensorType + '</span></p>';

                let loggedInUserId = '@this.User.GetId()';
                let isCurrentUserSensor = loggedInUserId === data[i].userId;

                if (isCurrentUserSensor) {
                    markers[i].setAnimation(google.maps.Animation.BOUNCE);
                    markers[i].addListener('click', function() {
                        if (markers[i].getAnimation() !== null) {
                            markers[i].setAnimation(null);
                        } else {
                            markers[i].setAnimation(google.maps.Animation.BOUNCE);
                        }
                    });

                    if (!data[i].isPublic) {
                        markers[i].setIcon(privateSensorIconUrl);
                        contentString += '<p>Status: <span class="h6 text-info"> Private <i class="fas fa-user-secret"></i></span></p>';
                    } else {
                        markers[i].setIcon(ownPublicSensorIconUrl);
                        contentString += '<p>Status: <span class="h6 text-info"> Public <i class="fas fa-globe-europe"></i></span></p>';
                    }
                }
                else {
                    contentString += '<p>Status: <span class="h6 text-info"> Public <i class="fas fa-globe-europe"></i></span></p>';
                }

                infoWindows[i] = new google.maps.InfoWindow({
                    content: contentString
                });

                markers[i].addListener('mouseover', function () {
                    infoWindows[i].open(gm_map, markers[i]);
                });

                markers[i].addListener('mouseout', function () {
                    infoWindows[i].close();
                });
            }

            let markerCluster = new MarkerClusterer(gm_map, markers);
        });
    }
</script>


