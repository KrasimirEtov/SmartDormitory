@model DetailsSensorViewModel

@{
    string sensorPrivacyIcon = Model.IsPublic ? "fa-globe-americas" : "fas fa-lock";
    string sensorPrivacyText = Model.IsPublic ? "Public" : "Private";
    string sensorAlarmIcon = Model.IsPublic ? "fa-bell" : "fas fa-times-circle";
    string sensorAlarmText = Model.AlarmOn ? "Alarm On" : "Alarm Off";
    string url = $"/Identity/Account/Manage?userId={Model.UserId}";
    string urlGetGauge = $"/Sensor/GetGaudeData?userId={Model.UserId}";
}

<div class="card">
    <div class="card-body">
        <div class="card">
            <div class="card-body">
                <h2 class="card-title" style="text-align:center">Sensor name: @Model.Name</h2>
                <a asp-controller="Sensor" asp-action="Update" asp-route-sensorId="@Model.SensorId"
                   class="btn btn-block waves-effect btn-outline-primary"><b>Edit</b></a>
            </div>
        </div>
        <br />
        <div class="form-row">
            <div class="col-md-6 col-sm-12">
                <div class="card ">
                    <div class="card-body text-center">
                        <h2 class="card-title">Description:</h2>
                        <p>@Model.Description</p>
                    </div>
                </div>
                <br />
                <div class="card">
                    <div class="card-body text-center">
                        <h2 class="card-title">Polling Interval:</h2>
                        <h4><b>@Model.PollingInterval</b> seconds</h4>
                    </div>
                </div>
                <br />
                <div class="card">
                    <div class="card-body text text-center">
                        <h2 class="card-title">Sensor state:</h2>
                        <div class="form-row">
                            <h4><i class="fas @sensorPrivacyIcon col-4"></i> @sensorPrivacyText</h4>
                            <h4><i class="fas @sensorPrivacyIcon col-3"></i> @sensorAlarmText</h4>
                        </div>

                    </div>
                </div>
            </div>
            <br />
            @if (Model.IsSwitch)
            {
                <div class="col-md-6 col-sm-12">
                    <div class="card">
                        <div class="card-body text-center">
                            <h2 class="card-title">Real time data:</h2>
                            <h4>Measure type: @Model.MeasureUnit</h4>
                            <br />
                            <div class="d-flex justify-content-center">
                                <div id="sensorIsSwitch" class="gauge sensor-size-isSwitch"></div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="col-md-6 col-sm-12">
                    <div class="card">
                        <div class="card-body text-center">
                            <h2 class="card-title">Real time data:</h2>
                            <h4>Measure type: @Model.MeasureUnit</h4>
                            <br />
                            <div class="d-flex justify-content-center">
                                <div id="sensorIsNotSwitch" class="gauge sensor-size-isNotSwitch"></div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <br />
        <div class="card">
            <div class="card-body">
                <h2 class="card-title text-center">Location:</h2>
                <div id="detailsMap"></div>
            </div>
        </div>
    </div>
</div>

<script src="~/lib/justgage/raphael-2.1.4.min.js"></script>
<script src="~/lib/justgage/justgage.js"></script>

<script>
    $(function () {
        var isSwitch = @Json.Serialize(Model.IsSwitch);
        var isSwitchGauge, isNotSwitchGauge;

        if (isSwitch) {
            var isSwitchDefaults = {
                value: @Model.StartValue,
                gaugeWidthScale: 0.5,
                donut: true,
                min: 0,
                max: 1,
                relativeGaugeSize: true,
                gaugeColor: "#FF0000", // false
                levelColors: ["#00b200"], // true
                textRenderer: function (val) {
                    if (val == 0) {
                        return 'Closed';
                    } else if (val == 1) {
                        return 'Opened';
                    }
                }
            }
            // instance of switch gauge
            isSwitchGauge = new JustGage({
                id: "sensorIsSwitch",
                defaults: isSwitchDefaults
            });

            setInterval(function () {
                $.getJSON('/Sensor/GetGaudeData?sensorId=@Model.SensorId', function (data) {
                    isSwitchGauge.refresh(data.userCurrentValue);
                }, @Model.PollingInterval * 1000);
            });
        }
        else {
            var isNotSwitchDefaults = {
                value: @Model.StartValue,
                min: @Model.MinRangeValue,
                max: @Model.MaxRangeValue,
                decimals: 2,
                gaugeWidthScale: 0.3,
                pointer: true,
                pointerOptions: {
                    toplength: 15,
                    bottomlength: 10,
                    bottomwidth: 2
                },
                levelColors: [
                    "#FF0000",
                    "#00b200",
                    "#FF0000"
                ],
                textRenderer: function (val) {

                    if (val < @Model.MinRangeValue) {
                        return 'Min range limit';
                    } else if (val > @Model.MaxRangeValue) {
                        return 'Max range limit';
                    } else if (val > @Model.MinRangeValue && val < @Model.MaxRangeValue) {
                        return val;
                    }
                },
                counter: true,
                relativeGaugeSize: true
            }

             // instance of not switch gauge
            isNotSwitchGauge = new JustGage({
            id: "sensorIsNotSwitch",
            defaults: isNotSwitchDefaults
            });

            setInterval(function () {
                $.getJSON('/Sensor/GetGaudeData?sensorId=@Model.SensorId', function (data) {
                    isNotSwitchGauge.refresh(data.userCurrentValue);
                });
            }, @Model.PollingInterval * 1000);
        }
    });
</script>



<script>
        function initMap() {
            // The location of the sensor
            var sensor = { lat: @Model.Latitude, lng: @Model.Longtitude };
            // The map, centered at the sensor
            var map = new google.maps.Map(
                document.getElementById('detailsMap'), {
                    zoom: 12,
                    center: sensor,
                    streetViewControl: true,
                    mapTypeId: 'roadmap'

                });
            // The marker, positioned at the sensor
            var marker = new google.maps.Marker({ position: sensor, map: map });
            var contentString = '<div id="content">'+
            '<div id="siteNotice">'+
            '</div>'+
            '<h1 id="firstHeading" class="firstHeading">@Model.Name</h1>'+
            '<div id="bodyContent">'+
            '<p><b>@Model.Description</b></p>'+
            '<p><b>Owner profile link - <a href="@url">'+
            'Click here</b></a>'+
            '</p>'+
            '</div>'+
            '</div>';

            var infowindow = new google.maps.InfoWindow({
                content: contentString
            });
             marker.addListener('click', function() {
          infowindow.open(map, marker);
        });
        }
</script>

<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAbGBfxwfVNuXS1OY-O8qbuglmWIbkEC70&callback=initMap">
</script>